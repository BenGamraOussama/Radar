#!/usr/bin/env python3
# -*- coding: utf-8 -*-

from reportlab.lib.pagesizes import letter, A4
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.units import inch
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle
from reportlab.lib import colors
from reportlab.lib.enums import TA_CENTER, TA_LEFT, TA_JUSTIFY
from datetime import datetime
import os

def create_project_analysis_pdf():
    # Configuration du document
    filename = "Analyse_Projet_IA_Classification.pdf"
    doc = SimpleDocTemplate(filename, pagesize=A4,
                          rightMargin=72, leftMargin=72,
                          topMargin=72, bottomMargin=18)
    
    # Styles
    styles = getSampleStyleSheet()
    
    # Style personnalis√© pour le titre
    title_style = ParagraphStyle(
        'CustomTitle',
        parent=styles['Heading1'],
        fontSize=18,
        spaceAfter=30,
        alignment=TA_CENTER,
        textColor=colors.darkblue
    )
    
    # Style pour les sous-titres
    subtitle_style = ParagraphStyle(
        'CustomSubtitle',
        parent=styles['Heading2'],
        fontSize=14,
        spaceAfter=12,
        spaceBefore=20,
        textColor=colors.darkgreen
    )
    
    # Style pour le texte normal
    normal_style = ParagraphStyle(
        'CustomNormal',
        parent=styles['Normal'],
        fontSize=11,
        spaceAfter=12,
        alignment=TA_JUSTIFY
    )
    
    # Style pour les listes
    bullet_style = ParagraphStyle(
        'CustomBullet',
        parent=styles['Normal'],
        fontSize=11,
        spaceAfter=6,
        leftIndent=20,
        bulletIndent=10
    )
    
    # Contenu du document
    story = []
    
    # Titre principal
    story.append(Paragraph("üéØ ANALYSE DU PROJET", title_style))
    story.append(Paragraph("Syst√®me de Classification IA pour Donn√©es CAN", title_style))
    story.append(Spacer(1, 20))
    
    # Date et informations g√©n√©rales
    story.append(Paragraph(f"<b>Date d'analyse:</b> {datetime.now().strftime('%d/%m/%Y')}", normal_style))
    story.append(Paragraph("<b>Type de projet:</b> Intelligence Artificielle - Machine Learning", normal_style))
    story.append(Spacer(1, 20))
    
    # Objectif Principal
    story.append(Paragraph("üéØ OBJECTIF PRINCIPAL", subtitle_style))
    story.append(Paragraph(
        "Ce projet est un <b>syst√®me de classification bas√© sur l'intelligence artificielle</b> "
        "pour analyser et pr√©dire des classes √† partir de donn√©es CAN (Controller Area Network) - "
        "typiquement utilis√©es dans les syst√®mes automobiles ou industriels.",
        normal_style
    ))
    story.append(Spacer(1, 15))
    
    # Composants du Projet
    story.append(Paragraph("üìã COMPOSANTS DU PROJET", subtitle_style))
    
    # 1. Analyse et Comparaison
    story.append(Paragraph("<b>1. Analyse et Comparaison de Mod√®les IA</b>", normal_style))
    story.append(Paragraph("‚Ä¢ Notebook Jupyter (IA_Model_Comparison.ipynb) pour comparer diff√©rents algorithmes", bullet_style))
    story.append(Paragraph("‚Ä¢ Utilisation de Random Forest et XGBoost pour la classification", bullet_style))
    story.append(Paragraph("‚Ä¢ Optimisation des hyperparam√®tres avec des outils comme Optuna", bullet_style))
    story.append(Spacer(1, 10))
    
    # 2. API Web
    story.append(Paragraph("<b>2. API Web de Pr√©diction</b>", normal_style))
    story.append(Paragraph("‚Ä¢ Application Flask (app.py) qui expose une API REST", bullet_style))
    story.append(Paragraph("‚Ä¢ Interface web (client.html) pour tester les pr√©dictions en temps r√©el", bullet_style))
    story.append(Paragraph("‚Ä¢ Endpoint /predict qui accepte 8 valeurs num√©riques (D0 √† D7)", bullet_style))
    story.append(Spacer(1, 10))
    
    # 3. Pipeline de Donn√©es
    story.append(Paragraph("<b>3. Pipeline de Donn√©es</b>", normal_style))
    story.append(Paragraph("‚Ä¢ Pr√©traitement des donn√©es hexad√©cimales CAN (conversion en entiers)", bullet_style))
    story.append(Paragraph("‚Ä¢ Normalisation avec StandardScaler", bullet_style))
    story.append(Paragraph("‚Ä¢ Gestion des valeurs manquantes", bullet_style))
    story.append(Spacer(1, 10))
    
    # 4. Mod√®les Entra√Æn√©s
    story.append(Paragraph("<b>4. Mod√®les Entra√Æn√©s</b>", normal_style))
    story.append(Paragraph("‚Ä¢ Mod√®le XGBoost optimis√© (xgb_optimized.pkl)", bullet_style))
    story.append(Paragraph("‚Ä¢ Mod√®le Random Forest (random_forest_model.pkl)", bullet_style))
    story.append(Paragraph("‚Ä¢ Scaler pr√©-entra√Æn√© pour la normalisation", bullet_style))
    story.append(Spacer(1, 15))
    
    # Fonctionnalit√©s
    story.append(Paragraph("üîß FONCTIONNALIT√âS", subtitle_style))
    story.append(Paragraph("‚Ä¢ <b>Pr√©diction en temps r√©el:</b> Interface web pour saisir des donn√©es et obtenir des pr√©dictions", bullet_style))
    story.append(Paragraph("‚Ä¢ <b>API REST:</b> Service web pour int√©grer les pr√©dictions dans d'autres applications", bullet_style))
    story.append(Paragraph("‚Ä¢ <b>Script de pr√©diction:</b> Outil en ligne de commande pour traiter des fichiers CSV", bullet_style))
    story.append(Paragraph("‚Ä¢ <b>Tests:</b> Validation des fonctionnalit√©s de l'API", bullet_style))
    story.append(Spacer(1, 15))
    
    # Cas d'Usage
    story.append(Paragraph("üí° CAS D'USAGE PROBABLE", subtitle_style))
    story.append(Paragraph("Ce projet semble √™tre con√ßu pour:", normal_style))
    story.append(Paragraph("‚Ä¢ <b>D√©tection d'anomalies</b> dans les r√©seaux CAN", bullet_style))
    story.append(Paragraph("‚Ä¢ <b>Classification de messages</b> automobiles ou industriels", bullet_style))
    story.append(Paragraph("‚Ä¢ <b>Surveillance en temps r√©el</b> de syst√®mes embarqu√©s", bullet_style))
    story.append(Paragraph("‚Ä¢ <b>Analyse pr√©dictive</b> de donn√©es IoT ou v√©hiculaires", bullet_style))
    story.append(Spacer(1, 15))
    
    # Architecture Technique
    story.append(Paragraph("üèóÔ∏è ARCHITECTURE TECHNIQUE", subtitle_style))
    
    # Tableau des fichiers principaux
    data = [
        ['Fichier', 'Description', 'Technologie'],
        ['app.py', 'API Flask principale', 'Python/Flask'],
        ['client.html', 'Interface utilisateur web', 'HTML/CSS/JavaScript'],
        ['predict.py', 'Script de pr√©diction CLI', 'Python'],
        ['IA_Model_Comparison.ipynb', 'Notebook d\'analyse', 'Jupyter/Python'],
        ['models/xgb_optimized.pkl', 'Mod√®le XGBoost entra√Æn√©', 'Pickle/Scikit-learn'],
        ['models/scaler.pkl', 'Normalisateur de donn√©es', 'Pickle/Scikit-learn'],
        ['requirements.txt', 'D√©pendances Python', 'pip']
    ]
    
    table = Table(data, colWidths=[2.5*inch, 2.5*inch, 1.5*inch])
    table.setStyle(TableStyle([
        ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
        ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
        ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
        ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
        ('FONTSIZE', (0, 0), (-1, 0), 10),
        ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
        ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
        ('FONTSIZE', (0, 1), (-1, -1), 9),
        ('GRID', (0, 0), (-1, -1), 1, colors.black)
    ]))
    
    story.append(table)
    story.append(Spacer(1, 15))
    
    # Technologies Utilis√©es
    story.append(Paragraph("‚öôÔ∏è TECHNOLOGIES UTILIS√âES", subtitle_style))
    story.append(Paragraph("‚Ä¢ <b>Backend:</b> Flask, Python", bullet_style))
    story.append(Paragraph("‚Ä¢ <b>Machine Learning:</b> Scikit-learn, XGBoost, Pandas, NumPy", bullet_style))
    story.append(Paragraph("‚Ä¢ <b>Visualisation:</b> Matplotlib, Seaborn", bullet_style))
    story.append(Paragraph("‚Ä¢ <b>Optimisation:</b> Optuna, GridSearchCV", bullet_style))
    story.append(Paragraph("‚Ä¢ <b>Frontend:</b> HTML, CSS, JavaScript", bullet_style))
    story.append(Paragraph("‚Ä¢ <b>Validation:</b> Pydantic", bullet_style))
    story.append(Spacer(1, 15))
    
    # Conclusion
    story.append(Paragraph("üìù CONCLUSION", subtitle_style))
    story.append(Paragraph(
        "Ce projet combine <b>recherche</b> (notebook), <b>d√©veloppement</b> (API) et "
        "<b>d√©ploiement</b> (interface web) dans un workflow complet de machine learning. "
        "Il repr√©sente une solution compl√®te pour la classification automatis√©e de donn√©es "
        "CAN avec une approche moderne et des outils de pointe en intelligence artificielle.",
        normal_style
    ))
    
    # Construction du PDF
    doc.build(story)
    return filename

if __name__ == "__main__":
    try:
        pdf_file = create_project_analysis_pdf()
        print(f"‚úÖ PDF g√©n√©r√© avec succ√®s: {pdf_file}")
        print(f"üìÅ Emplacement: {os.path.abspath(pdf_file)}")
    except Exception as e:
        print(f"‚ùå Erreur lors de la g√©n√©ration du PDF: {e}")
        print("üí° Assurez-vous d'avoir install√© reportlab: pip install reportlab")
